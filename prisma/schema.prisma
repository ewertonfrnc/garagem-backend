generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int       @id @default(autoincrement())
  name                 String
  email                String    @unique
  photo                String?
  password             String
  passwordConfirm      String
  passwordChangedAt    DateTime  @default(now())
  passwordResetExpires DateTime?
  passwordResetToken   String?

  roleId Int
  roles  Role @relation(fields: [roleId], references: [id])

  @@map("users")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String
  User User[]

  @@map("roles")
}

model ExerciseModality {
  id    Int    @id @default(autoincrement())
  label String
  code  String

  exercises Exercise[]

  @@map("exercise_modalities")
}

model CategoryFields {
  id    Int    @id @default(autoincrement())
  label String
  code  String

  exerciseCategory ExerciseCategory[] @relation("CategoryFieldsToExerciseCategory")

  @@map("category_fields")
}

model ExerciseCategory {
  id    Int    @id @default(autoincrement())
  label String
  code  String

  exercises Exercise[]
  fields    CategoryFields[] @relation("CategoryFieldsToExerciseCategory")

  @@map("exercise_categories")
}

model MuscleGroup {
  id    Int    @id @default(autoincrement())
  label String
  code  String

  exercises Exercise[] @relation("ExerciseToMuscleGroup")

  @@map("muscle_groups")
}

model Exercise {
  id        Int      @id @default(autoincrement())
  name      String
  image     String?
  video     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  exerciseModality Int
  modality         ExerciseModality @relation(fields: [exerciseModality], references: [id])

  exerciseCategory Int
  category         ExerciseCategory @relation(fields: [exerciseCategory], references: [id])

  muscleGroups MuscleGroup[] @relation("ExerciseToMuscleGroup")

  @@map("exercises")
}
