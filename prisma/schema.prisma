generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int       @id @default(autoincrement())
  name                 String
  email                String    @unique
  photo                String?
  password             String
  passwordConfirm      String
  passwordChangedAt    DateTime  @default(now())
  passwordResetExpires DateTime?
  passwordResetToken   String?

  // Relations
  roleId          Int
  roles           Role             @relation(fields: [roleId], references: [id])
  studentWorkouts StudentWorkout[]

  @@map("users")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String

  // Relations
  User User[]

  @@map("roles")
}

model ExerciseModality {
  id    Int    @id @default(autoincrement())
  label String @unique
  code  String @unique

  // Relations
  exercises Exercise[]

  @@map("exercise_modalities")
}

model CategoryFields {
  id    Int    @id @default(autoincrement())
  label String @unique
  code  String @unique

  // Relations
  exerciseCategory ExerciseCategory[]

  @@map("category_fields")
}

model ExerciseCategory {
  id    Int    @id @default(autoincrement())
  label String @unique
  code  String @unique

  // Relations
  exercises Exercise[]
  fields    CategoryFields[]

  @@map("exercise_categories")
}

model MuscleGroup {
  id    Int    @id @default(autoincrement())
  label String @unique
  code  String @unique

  // Relations
  exercises Exercise[]

  @@map("muscle_groups")
}

model Exercise {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  image     String?
  video     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  muscleGroups MuscleGroup[]
  modality     ExerciseModality @relation(fields: [exerciseModality], references: [id])
  category     ExerciseCategory @relation(fields: [exerciseCategory], references: [id])

  exerciseModality Int
  exerciseCategory Int

  workoutExercises WorkoutExercise[]

  @@map("exercises")
}

model Workout {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  workoutExercises WorkoutExercise[]
  studentWorkouts  StudentWorkout[]

  @@map("workouts")
}

model Set {
  id       Int     @id @default(autoincrement())
  reps     Int? // Torna opcional, pode ser nulo se for um set por tempo/distância
  rest     Int // Descanso em segundos
  weight   Float? // Peso utilizado (em kg). 
  duration Int? // Duração em segundos
  distance Float? // Distância (ex: em metros). 
  notes    String? // Campo adicional para notas específicas da série, se necessário

  // Relations
  workoutExerciseId Int
  workoutExercise   WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)

  @@map("sets")
}

model WorkoutExercise {
  id    Int     @id @default(autoincrement())
  order Int? // Opcional: para definir a ordem dos exercícios no treino
  notes String?

  // Relations
  workoutId  Int
  workout    Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exerciseId Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  sets Set[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([workoutId, exerciseId, order])
  @@map("workout_exercises")
}

// Model to associate workouts with students on specific dates
model StudentWorkout {
  id        Int      @id @default(autoincrement())
  date      DateTime
  notes     String?
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  workout Workout @relation(fields: [workoutId], references: [id])

  userId    Int
  workoutId Int

  @@map("student_workouts")
}
